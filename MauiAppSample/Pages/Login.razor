@page "/login"
@using MauiAppSample.Data;
@using MauiAppSample.Shared
@using System.Net.Http.Json;

@inject IJSRuntime jsr

<h3>Login</h3>
<p>@message</p>
<EditForm Model="user" OnValidSubmit="OnValid" style="max-width:500px;">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="mb-2">
		<InputText class="form-control" @bind-Value="user.username" placeholder="Enter Username"></InputText>
	</div>
	<div class="mb-2">
		<InputText type="password" class="form-control" @bind-Value="user.password" placeholder="Enter Password"></InputText>
	</div>
	<div class="mb-2 text-right">
		<button class="btn btn-secondary" disabled="@isDisabled">login</button>
	</div>
</EditForm>

@code {
	LoginModel user = new LoginModel();
	string message = string.Empty;
	bool isDisabled = false;

	private async Task OnValid()
	{
		isDisabled = true;
		HttpClient client = new HttpClient();
		try
		{
			var msg = await client.PostAsJsonAsync<LoginModel>($"{AuthHelper.BaseAdress}/api/auth/signin", user, System.Threading.CancellationToken.None);

		if (msg.IsSuccessStatusCode)
			{
				LoginResult result = await msg.Content.ReadFromJsonAsync<LoginResult>();
				//message = result.message;
				isDisabled = false;
				//if (string.IsNullOrEmpty(result.error))
					await jsr.InvokeVoidAsync("localStorage.setItem", "user", $"{result.email};{result.accessToken}").ConfigureAwait(false);
				//else
				//{
				//	Console.WriteLine(result);
				//}
			}
			else
			{
				LoginError result = await msg.Content.ReadFromJsonAsync<LoginError>();
				message = result.message;
				Console.WriteLine(result);
				Console.WriteLine(msg.StatusCode);
			}
		}
		catch (Exception ex)
		{

			Console.WriteLine(ex);
		}
		finally
		{
			client.Dispose();
		}

	}
}